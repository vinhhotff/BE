/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/no-unsafe-argument */
/* eslint-disable @typescript-eslint/no-unsafe-return */
/* eslint-disable @typescript-eslint/no-unsafe-call */
/* eslint-disable @typescript-eslint/no-unsafe-assignment */
/* eslint-disable @typescript-eslint/no-unsafe-member-access */

/**
 * User Service - H·ªó tr·ª£ query string filtering v√† sorting
 *
 * API Endpoint: GET /api/v1/user
 *
 * Query Parameters:
 * - page: S·ªë trang (m·∫∑c ƒë·ªãnh: 1)
 * - limit: S·ªë item tr√™n 1 trang (m·∫∑c ƒë·ªãnh: 10)
 * - qs: Query string filtering (format: key=value,key2=value2)
 * - sortBy: Tr∆∞·ªùng ƒë·ªÉ s·∫Øp x·∫øp (m·∫∑c ƒë·ªãnh: createdAt)
 * - sortOrder: Th·ª© t·ª± s·∫Øp x·∫øp asc/desc (m·∫∑c ƒë·ªãnh: desc)
 *
 * C√°c key h·ªó tr·ª£ trong qs:
 * - search: T√¨m ki·∫øm t·ªïng h·ª£p trong name v√† email
 * - name: T√¨m ki·∫øm theo t√™n c·ª• th·ªÉ
 * - email: T√¨m ki·∫øm theo email c·ª• th·ªÉ
 * - role: T√¨m ki·∫øm theo t√™n role (kh√¥ng ph·∫£i ID)
 * - phone: T√¨m ki·∫øm theo s·ªë ƒëi·ªán tho·∫°i
 *
 * V√≠ d·ª• s·ª≠ d·ª•ng:
 * - http://localhost:8083/api/v1/user?page=1&limit=10&qs=role=admin&sortBy=name&sortOrder=desc
 * - http://localhost:8083/api/v1/user?page=1&limit=5&qs=search=vinh,role=admin
 * - http://localhost:8083/api/v1/user?page=2&limit=20&sortBy=createdAt&sortOrder=asc
 * - http://localhost:8083/api/v1/user?qs=name=john,email=john@example.com
 *
 * Response:
 * - Role ƒë∆∞·ª£c populate v·ªõi t√™n v√† permissions
 * - Password v√† refreshToken ƒë∆∞·ª£c lo·∫°i b·ªè kh·ªèi response
 * - Tr·∫£ v·ªÅ role.name thay v√¨ role ObjectId
 */
import { JwtService } from '@nestjs/jwt';
import { compare, genSaltSync, hash } from 'bcrypt';
import {
  BadRequestException,
  Injectable,
  UnauthorizedException,
} from '@nestjs/common';
import { CreateUserDto, RegisterUserDto } from './dto/create-user.dto';
import { UpdateUserDto } from './dto/update-user.dto';
import { IUser } from './user.interface';
import { InjectModel } from '@nestjs/mongoose';
import { User, UserDocument } from './schemas/user.schema';
import type { SoftDeleteModel } from 'soft-delete-plugin-mongoose';
import mongoose, { Types } from 'mongoose';
import { ConfigService } from '@nestjs/config';
import { PaginationResult, SearchUserDto } from './dto/user.dto';
import { 
  PaginationQueryDto, 
  PaginationResponseDto, 
  buildSortObject, 
  buildSearchFilter 
} from '../common/dto/pagination.dto';
@Injectable()
export class UserService {
  constructor(
    @InjectModel(User.name) private userModel: SoftDeleteModel<UserDocument>, // üëà CH√ö √ù
    private readonly JwtService: JwtService, // Th√™m JwtService n·∫øu c·∫ßn
    private readonly configService: ConfigService // Th√™m ConfigService n·∫øu c·∫ßn
  ) {}

  //hashPassword function to hash the password
  hashedSomething = async (something: string): Promise<string> => {
    const salt = genSaltSync(10);
    const hashedSomething = await hash(something, salt);
    return hashedSomething;
  };

  //findbyEmail function to find user by email
  findByEmail = async (email: string) => {
    return this.userModel.findOne({ email }).exec();
  };

  //create function to create user
  async createUser(createUserDto: CreateUserDto, user: IUser) {
    const { name, email, password, phone, address, role } = createUserDto;
    const hashedPassword = await this.hashedSomething(password);
    const existedEmail = await this.findByEmail(email);
    if (existedEmail) {
      throw new BadRequestException('Email already exists');
    } else {
      const newUser = await this.userModel.create({
        name,
        email,
        password: hashedPassword,
        phone,
        avatar: createUserDto.avatar,
        address,
        role: role || 'User',
        createdBy: {
          email: user.email,
        },
      });

      // Tr·∫£ v·ªÅ user v·ªõi role ƒë√£ populate v√† lo·∫°i b·ªè password
      const populatedUser = await this.userModel
        .findById(newUser._id)
        .populate({
          path: 'role',
          select: 'name', // Ch·ªâ l·∫•y t√™n c·ªßa role
        })
        .select('-password -refreshToken') // Lo·∫°i b·ªè c√°c tr∆∞·ªùng nh·∫°y c·∫£m
        .exec();

      return populatedUser;
    }
  }

  // Chu·∫©n h√≥a search users theo format m·ªõi
  async searchUsers(query: SearchUserDto): Promise<PaginationResponseDto<User>> {
    const {
      page = 1,
      limit = 10,
      search,
      sortBy = 'createdAt',
      sortOrder = 'desc',
      role,
      status,
    } = query;

    console.log('üîç SearchUsers called with standardized query:', query);

    // Build base filter
    let filter: any = {};

    // X·ª≠ l√Ω search parameter
    if (search && search.trim()) {
      const searchFilter = buildSearchFilter(search, ['name', 'email']);
      filter = { ...filter, ...searchFilter };
    }

    // X·ª≠ l√Ω role filter
    if (role && role !== 'all') {
      filter.role = role;
    }

    // X·ª≠ l√Ω status filter (n·∫øu c√≥)
    if (status && status !== 'all') {
      // Implement status filter logic here if needed
      // filter.status = status;
    }

    console.log('üîç Final filter applied:', filter);

    // T·∫°o sort object
    const sort = buildSortObject(sortBy, sortOrder);
    console.log('üîç Sort applied:', sort);

    // ƒê·∫øm t·ªïng s·ªë documents
    const total = await this.userModel.countDocuments(filter);
    console.log('üîç Total documents found:', total);

    // T√≠nh to√°n pagination
    const skip = (page - 1) * limit;

    // Th·ª±c hi·ªán query
    const data = await this.userModel
      .find(filter)
      .sort(sort)
      .skip(skip)
      .limit(limit)
      .populate({
        path: 'role',
        select: 'name', // Ch·ªâ l·∫•y t√™n c·ªßa role
      })
      .select('-password -refreshToken') // Lo·∫°i b·ªè password v√† refreshToken
      .exec();

    console.log(`‚úÖ Found ${data.length} users on page ${page}`);
    console.log('üîç First user sample:', {
      name: data[0]?.name,
      email: data[0]?.email,
    });

    // Tr·∫£ v·ªÅ theo format chu·∫©n
    const result = new PaginationResponseDto(data, total, page, limit);
    
    console.log('üöÄ User Service - Returning standardized format:', {
      hasData: !!result.data,
      dataLength: result.data ? result.data.length : 0,
      hasMeta: !!result.meta,
      metaTotal: result.meta ? result.meta.total : 'no meta',
      resultKeys: Object.keys(result)
    });
    
    return result;
  }

  private parseQueryString(qs: string): Record<string, string> {
    const conditions: Record<string, string> = {};

    console.log('üîç Parsing query string:', qs);
    console.log('üîç Decoded query string:', decodeURIComponent(qs));

    // Auto-detect delimiter: & (URL encoded) or , (comma separated)
    const decodedQs = decodeURIComponent(qs);
    let pairs: string[];

    if (decodedQs.includes('&')) {
      // URL encoded format: "role=staff&sortBy=name&sortOrder=desc"
      pairs = decodedQs.split('&').map((pair) => pair.trim());
      console.log('üîç Detected URL encoded format (&)');
    } else {
      // Comma separated format: "role=admin,name=vinh,email=test@example.com"
      pairs = decodedQs.split(',').map((pair) => pair.trim());
      console.log('üîç Detected comma separated format (,)');
    }

    console.log('üîç Split pairs:', pairs);

    for (const pair of pairs) {
      const [key, value] = pair.split('=');
      if (key && value) {
        const cleanKey = key.trim();
        const cleanValue = value.trim();
        conditions[cleanKey] = cleanValue;
        console.log(`‚úÖ Parsed condition: ${cleanKey} = ${cleanValue}`);
      }
    }

    console.log('üîç Final parsed conditions:', conditions);
    return conditions;
  }

  private async buildMongoFilter(
    conditions: Record<string, string>
  ): Promise<any> {
    const filter: any = {};

    // Danh s√°ch field ƒë∆∞·ª£c ph√©p search (bao g·ªìm sort parameters)
    const validFields = [
      'role',
      'status',
      'name',
      'email',
      'phone',
      'search',
      'sortBy',
      'sortOrder',
    ];

    console.log('üîç Building MongoDB filter for conditions:', conditions);

    for (const [key, value] of Object.entries(conditions)) {
      if (validFields.includes(key)) {
        if (key === 'sortBy' || key === 'sortOrder') {
          // B·ªè qua sort parameters - ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω ·ªü searchUsers
          console.log(`‚ÑπÔ∏è Skipping sort parameter: ${key}`);
        } else if (key === 'role') {
          // T√¨m role theo t√™n thay v√¨ ObjectId
          console.log(`üîç Searching for role with name: ${value}`);

          const roleModel = this.userModel.db.model('Role');

          // Debug: Ki·ªÉm tra t·∫•t c·∫£ roles trong DB
          const allRoles = await roleModel.find({}).select('_id name').exec();
          console.log('üîç All roles in DB:', allRoles);

          const matchingRoles = await roleModel
            .find({
              name: { $regex: value, $options: 'i' },
            })
            .select('_id name');

          console.log(
            'üîç Found matching roles for "' + value + '":',
            matchingRoles
          );

          if (matchingRoles.length > 0) {
            // Handle both ObjectId and string types for role field
            const roleIds = matchingRoles.map((role) => role._id);
            const roleStrings = matchingRoles.map((role) =>
              role._id.toString()
            );

            filter.role = {
              $in: [...roleIds, ...roleStrings],
            };

            console.log(
              '‚úÖ Role filter applied with both ObjectId and string:',
              filter.role
            );
          } else {
            // N·∫øu kh√¥ng t√¨m th·∫•y role, ƒë·∫∑t ƒëi·ªÅu ki·ªán kh√¥ng th·ªÉ match
            filter.role = null;
            console.log(
              '‚ùå No matching roles found, setting role filter to null'
            );
          }
        } else if (key === 'search') {
          // T√¨m ki·∫øm t·ªïng h·ª£p trong name v√† email
          filter.$or = [
            { name: { $regex: value, $options: 'i' } },
            { email: { $regex: value, $options: 'i' } },
          ];
          console.log('‚úÖ Search filter applied:', filter.$or);
        } else if (key === 'name' || key === 'email' || key === 'phone') {
          // Text fields s·ª≠ d·ª•ng regex ƒë·ªÉ partial search (case-insensitive)
          filter[key] = { $regex: value, $options: 'i' };
          console.log(`‚úÖ ${key} filter applied:`, filter[key]);
        } else {
          // Exact match cho c√°c field kh√°c
          filter[key] = value;
          console.log(`‚úÖ ${key} exact match filter applied:`, value);
        }
      } else {
        console.log(`‚ö†Ô∏è Skipping invalid field: ${key}`);
      }
    }

    console.log('üîç Final MongoDB filter:', filter);
    return filter;
  }

  // Method ƒë·ªÉ search by role name thay v√¨ ID (DEPRECATED - S·ª≠ d·ª•ng searchUsers instead)
  async searchUsersByRoleName(
    query: SearchUserDto
  ): Promise<PaginationResult<User>> {
    const { page = 1, limit = 10, qs, sortBy, sortOrder } = query;

    const aggregationPipeline: any[] = [];

    // N·∫øu c√≥ search conditions
    if (qs) {
      const searchConditions = this.parseQueryString(qs);

      // Lookup role ƒë·ªÉ c√≥ th·ªÉ search by role name
      aggregationPipeline.push({
        $lookup: {
          from: 'roles', // collection name c·ªßa roles
          localField: 'role',
          foreignField: '_id',
          as: 'roleDetails',
        },
      });

      // Match stage
      const matchConditions: any = {};

      Object.entries(searchConditions).forEach(([key, value]) => {
        if (key === 'role') {
          // Search by role name thay v√¨ ID
          matchConditions['roleDetails.name'] = {
            $regex: value,
            $options: 'i',
          };
        } else if (key === 'name' || key === 'email') {
          matchConditions[key] = { $regex: value, $options: 'i' };
        } else if (['status', 'phone'].includes(key)) {
          matchConditions[key] = value;
        }
      });

      if (Object.keys(matchConditions).length > 0) {
        aggregationPipeline.push({ $match: matchConditions });
      }
    }

    // Add sorting
    if (sortBy) {
      const sortObj: any = {};
      sortObj[sortBy] = sortOrder === 'asc' ? 1 : -1;
      aggregationPipeline.push({ $sort: sortObj });
    }

    // Count total for pagination
    const countPipeline = [...aggregationPipeline, { $count: 'total' }];
    const countResult = await this.userModel.aggregate(countPipeline);
    const total = countResult[0]?.total || 0;

    // Add pagination - ƒê·∫£m b·∫£o page v√† limit kh√¥ng undefined
    const safePage = page || 1;
    const safeLimit = limit || 10;
    const skip = (safePage - 1) * safeLimit;
    aggregationPipeline.push({ $skip: skip }, { $limit: safeLimit });

    // Execute aggregation
    const data = await this.userModel.aggregate(aggregationPipeline);

    // T√≠nh to√°n pagination info
    const totalPages = Math.ceil(total / safeLimit);
    const hasNext = safePage < totalPages;
    const hasPrev = safePage > 1;

    return {
      data,
      total,
      page: safePage,
      limit: safeLimit,
      totalPages,
      hasNext,
      hasPrev,
    };
  }

  async findOneID(id: string) {
    if (!Types.ObjectId.isValid(id)) {
      throw new BadRequestException('Invalid ID format');
    }

    const user = await this.userModel
      .findById(id)
      .populate({
        path: 'role',
        select: 'name', // Ch·ªâ l·∫•y t√™n c·ªßa role
      })
      .select('-password -refreshToken') // Lo·∫°i b·ªè c√°c tr∆∞·ªùng nh·∫°y c·∫£m
      .exec();

    if (!user) {
      throw new BadRequestException('User not found');
    }

    return user;
  }
  async countUsers(): Promise<number> {
    return this.userModel.countDocuments();
  }

  async update(id: string, updateUserDto: UpdateUserDto, user?: IUser) {
    if (!Types.ObjectId.isValid(id)) {
      throw new BadRequestException('Invalid ID format');
    }
    const userExist = await this.userModel.findById(id).exec();
    if (!userExist) {
      throw new BadRequestException('User not found');
    } else {
      const updatedUser = {
        ...updateUserDto,
        updatedBy: user
          ? {
              _id: user._id,
              email: user.email,
            }
          : undefined,
      };
      const updated = await this.userModel
        .findByIdAndUpdate(id, updatedUser, { new: true })
        .populate({
          path: 'role',
          select: 'name', // Ch·ªâ l·∫•y t√™n c·ªßa role
        })
        .select('-password -refreshToken') // Lo·∫°i b·ªè c√°c tr∆∞·ªùng nh·∫°y c·∫£m
        .exec();
      return updated;
    }
  }

  async remove(id: string, user: IUser) {
    if (id === user._id.toString()) {
      throw new BadRequestException('Cannot remove yourself');
    }

    if (!mongoose.Types.ObjectId.isValid(id)) {
      throw new BadRequestException('Invalid ID');
    }

    const userExist = await this.userModel.findById(id).exec();

    if (!userExist) {
      throw new BadRequestException('User not found');
    }

    // C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi x√≥a
    await this.userModel.findByIdAndUpdate(id, {
      deletedBy: {
        _id: user._id,
        email: user.email,
      },
    });

    // Soft delete user
    await this.userModel.softDelete({ _id: id });

    return {
      message: 'User deleted successfully',
      deletedBy: {
        _id: user._id,
        email: user.email,
      },
    };
  }

  async validatePassword(
    plainPassword: string,
    hashedPassword: string
  ): Promise<boolean> {
    return await compare(plainPassword, hashedPassword);
  }

  async findUserByEmail(email: string): Promise<User | null> {
    return this.userModel.findOne({ email });
  }

  async findUserWithRoleAndPermissions(userId: string): Promise<User | null> {
    return this.userModel
      .findById(userId)
      .populate({
        path: 'role',
        populate: {
          path: 'permissions',
        },
      })
      .exec();
  }

  async register(user: RegisterUserDto) {
    const { name, email, password } = user;
    const hashedPassword = await this.hashedSomething(password);
    const existedEmail = await this.findByEmail(email);
    if (existedEmail) {
      throw new BadRequestException('Email already exists');
    } else {
      const newUser = await this.userModel.create({
        name,
        email,
        password: hashedPassword,
      });
      return newUser;
    }
  }
  async updateRefreshToken(userId: string, refreshToken: string) {
    if (!Types.ObjectId.isValid(userId)) {
      throw new BadRequestException('Invalid user ID format');
    }
    const user = await this.userModel.findById(userId).exec();
    if (!user) {
      throw new BadRequestException('User not found');
    }
    user.refreshToken = refreshToken;
    await user.save();
  }
  async findUserByAccessToken(accessToken: string): Promise<User> {
    try {
      const payload = await this.JwtService.verifyAsync(accessToken, {
        secret: this.configService.get<string>('JWT_SECRET_TOKEN_SECRET'),
      });

      const user = await this.userModel.findById(payload._id).exec();
      if (!user) {
        throw new UnauthorizedException('User not found');
      }
      return user;
    } catch (err) {
      throw new UnauthorizedException('Invalid token');
    }
  }
}
