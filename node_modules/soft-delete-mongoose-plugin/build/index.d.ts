/**
 * soft-deleted methods: softDeleteOne, softDeleteMany, findByIdAndSoftDelete
 */
import { FilterQuery, Model, QueryOptions, QueryWithHelpers, Schema, HydratedDocument, Callback, UpdateWriteOpResult, CallbackError, ModifyResult, Types, ReturnsNewDoc } from 'mongoose';
export interface SoftDeleteModel<T, TQueryHelpers = {}, TMethodsAndOverrides = {}, TVirtuals = {}> extends Model<T, TQueryHelpers, TMethodsAndOverrides, TVirtuals> {
    softDeleteOne<ResultDoc = HydratedDocument<T, TMethodsAndOverrides, TVirtuals>>(filter?: FilterQuery<T>, options?: QueryOptions | null, callback?: Callback): QueryWithHelpers<UpdateWriteOpResult, ResultDoc, TQueryHelpers, T>;
    softDeleteMany<ResultDoc = HydratedDocument<T, TMethodsAndOverrides, TVirtuals>>(filter?: FilterQuery<T>, options?: QueryOptions | null, callback?: Callback): QueryWithHelpers<UpdateWriteOpResult, ResultDoc, TQueryHelpers, T>;
    findByIdAndSoftDelete<ResultDoc = HydratedDocument<T, TMethodsAndOverrides, TVirtuals>>(id: Types.ObjectId | any, options: QueryOptions & {
        rawResult: true;
    }, callback?: (err: CallbackError, doc: any, res: any) => void): QueryWithHelpers<ModifyResult<ResultDoc>, ResultDoc, TQueryHelpers, T>;
    findByIdAndSoftDelete<ResultDoc = HydratedDocument<T, TMethodsAndOverrides, TVirtuals>>(id: Types.ObjectId | any, options: QueryOptions & {
        upsert: true;
    } & ReturnsNewDoc, callback?: (err: CallbackError, doc: ResultDoc, res: any) => void): QueryWithHelpers<ResultDoc, ResultDoc, TQueryHelpers, T>;
    findByIdAndSoftDelete<ResultDoc = HydratedDocument<T, TMethodsAndOverrides, TVirtuals>>(id?: Types.ObjectId | any, options?: QueryOptions | null, callback?: (err: CallbackError, doc: ResultDoc | null, res: any) => void): QueryWithHelpers<ResultDoc | null, ResultDoc, TQueryHelpers, T>;
    findByIdAndSoftDelete<ResultDoc = HydratedDocument<T, TMethodsAndOverrides, TVirtuals>>(id: Types.ObjectId | any, callback: (err: CallbackError, doc: ResultDoc | null, res: any) => void): QueryWithHelpers<ResultDoc | null, ResultDoc, TQueryHelpers, T>;
}
declare const overriddenMethods: readonly ["aggregate", "bulkWrite", "count", "countDocuments", "distinct", "exists", "find", "findOne", "findOneAndReplace", "findOneAndUpdate", "replaceOne", "update", "updateMany", "updateOne"];
declare type OverriddenMethod = typeof overriddenMethods[number];
declare type OverrideOptions = Record<OverriddenMethod, boolean>;
export declare class SoftDelete {
    private isDeletedField;
    private deletedAtField;
    private mongoDBVersion;
    private overrideOptions;
    private nonDeletedFilterOptions;
    private deleteUpdateOptions;
    private nonDeletedPipelineMatchOptions;
    constructor(options: {
        isDeletedField: string;
        deletedAtField: string;
        mongoDBVersion?: string;
        override?: OverrideOptions;
    });
    private isLookupStage;
    private isGraphLookupStage;
    private isIncludeSoftDeleteField;
    getPlugin(): (schema: Schema) => void;
}
export {};
